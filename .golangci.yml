# golangci-lint v2 Configuration
# AI-aware process management tool - Portguard
# Comprehensive linting with latest best practices

version: "2"

run:
  # Timeout for analysis
  timeout: 5m
  # Exit code when issues are found
  issues-exit-code: 1
  # Include test files in analysis
  tests: true
  go: '1.24'

output:
  # Output formats
  formats:
    text:
      path: stdout
      colors: true

linters:
  # Disable all default linters, then enable specific ones
  default: none
  
  # Enable comprehensive linters for production-ready code
  enable:
    # Bugs detection
    - errcheck        # Check for unchecked errors
    - gosec          # Security vulnerabilities
    - govet          # Standard Go vet checks
    - staticcheck    # Comprehensive static analysis (includes gosimple, stylecheck)
    - bodyclose      # HTTP response body close checks
    - contextcheck   # Context usage checks
    - errorlint      # Error wrapping checks
    - exhaustive     # Enum exhaustiveness
    - makezero       # Slice initialization checks
    - nilerr         # Nil error checks
    - nilnesserr     # Nil/error return checks
    - noctx          # HTTP request without context checks
    - rowserrcheck   # SQL row error checks
    - sqlclosecheck  # SQL connection close checks
    - testifylint    # Testify usage checks
    
    # Code style and quality
    - misspell       # Spelling mistakes
    - revive         # Golint replacement with more rules
    - gocritic       # Comprehensive checks collection
    - unconvert      # Unnecessary type conversions
    - unparam        # Unused function parameters
    - unused         # Unused code detection
    - wastedassign   # Wasted assignments
    - whitespace     # Whitespace issues
    
    # Complexity and maintainability
    - cyclop         # Cyclomatic complexity
    - gocognit       # Cognitive complexity
    - gocyclo        # Cyclomatic complexity
    - funlen         # Function length
    - nestif         # Deeply nested if statements
    - maintidx       # Maintainability index
    
    # Performance
    - prealloc       # Slice preallocation
    - perfsprint     # Performance sprintf checks
    
    # Error handling
    - err113         # Error definition checks
    - wrapcheck      # Error wrapping checks
    
    # Code consistency
    - goconst        # Repeated strings that could be constants
    - gomoddirectives # Go.mod directive checks
    - mnd            # Magic numbers detection (was gomnd in older versions)
    - varnamelen     # Variable name length checks
    - ireturn        # Interface return checks
    - interfacebloat # Large interface checks
    
    # Testing
    - tparallel      # Parallel test checks
    - testpackage    # Test package naming
    - thelper        # Test helper functions
    
    # Import management
    - depguard       # Dependency management
    - importas       # Import aliasing consistency

  settings:
    # Error checking
    errcheck:
      # Check type assertions
      check-type-assertions: true
      # Check blank assignments
      check-blank: true
      # Ignore these functions when checking for unhandled errors
      exclude-functions:
        - io.Copy(*bytes.Buffer)
        - fmt.Print*
        - fmt.Fprint*
        - (*os.File).Close

    # Security linter
    gosec:
      # Include test files
      include-tests: true
      # Exclude specific rules
      excludes:
        - G204  # Subprocess launched with variable (often false positive in CLI apps)
      # Severity levels
      severity: medium
      confidence: medium

    # Go vet configuration
    govet:
      # Enable all checks
      enable-all: true
      # Disable specific checks that are too noisy
      disable:
        - fieldalignment  # Struct field alignment (can be noisy)

    # Static analysis
    staticcheck:
      checks:
        - all
        - '-SA1019'  # Disable deprecated package usage (allow for backward compatibility)

    # Code critic
    gocritic:
      # Enable recommended checks
      enabled-tags:
        - style
        - performance
        - diagnostic
      disabled-checks:
        - unnamedResult  # Allow unnamed results for simple functions

    # Cyclomatic complexity
    cyclop:
      # Maximum complexity
      max-complexity: 10
      # Package average complexity
      package-average: 5.0

    # Cognitive complexity
    gocognit:
      # Minimum complexity to report
      min-complexity: 15

    # Function length
    funlen:
      # Maximum number of lines
      lines: 80
      # Maximum number of statements
      statements: 40
      # Ignore comments for line counting
      ignore-comments: true

    # Nested if statements
    nestif:
      # Minimum complexity
      min-complexity: 4

    # Magic numbers
    mnd:
      # Ignored numbers
      ignored-numbers:
        - '0'
        - '1'
        - '2'
        - '3'
        - '8'  # Common for octal permissions
        - '16'
        - '32'
        - '64'
        - '100'
        - '200'
        - '404'
        - '500'
        - '1000'
        - '1024'
        - '3000'  # Common port range start
        - '8000'
        - '8080'
        - '9000'  # Common port range end
      # Ignore in these contexts
      ignored-functions:
        - os.Chmod
        - os.Mkdir*
        - strconv.*
        - time.*

    # Import grouping and sorting was here (gci removed as it's a formatter)

    # Revive rules
    revive:
      rules:
        # Enable important rules
        - name: exported
          arguments: ["checkPrivateReceivers", "sayRepetitiveInsteadOfStutters"]
        - name: blank-imports
        - name: context-as-argument
        - name: defer
        - name: dot-imports
        - name: empty-block
        - name: error-naming
        - name: error-return
        - name: error-strings
        - name: increment-decrement
        - name: indent-error-flow
        - name: range
        - name: receiver-naming
        - name: redefines-builtin-id
        - name: superfluous-else
        - name: time-naming
        - name: unexported-return
        - name: unreachable-code
        - name: unused-parameter
        - name: var-declaration
        - name: var-naming

    # Variable name length
    varnamelen:
      # Minimum length for variables
      min-name-length: 2
      # Ignore these variable names
      ignore-names:
        - err
        - id
        - ip
        - db
        - tx
        - ok
        - i
        - j
        - k
        - v

    # Error wrapping
    wrapcheck:
      # Ignore these packages
      ignore-sigs:
        - .Errorf(
        - errors.New(
        - errors.Unwrap(
        - errors.Join(
        - .Wrap(
        - .Wrapf(

    # Interface return checks
    ireturn:
      allow:
        - anon
        - error
        - empty
        - stdlib
        - "generic"

    # Dependency guard
    depguard:
      rules:
        main:
          files:
            - "!**/*_test.go"
          allow:
            - $gostd
            - github.com/spf13/cobra
            - github.com/spf13/viper
            - github.com/paveg/portguard
          deny:
            - pkg: "reflect"
              desc: "avoid reflection for performance"
        test:
          files:
            - "**/*_test.go"
          allow:
            - $gostd
            - github.com/stretchr/testify
            - github.com/paveg/portguard

    # Testify linting
    testifylint:
      enable-all: true
      disable:
        - suite-dont-use-pkg  # Allow testify/suite usage

  # Exclusions configuration  
  exclusions:
    # Generated files exclusion
    generated: strict
    
    # Path-based exclusions
    paths:
      - ".*\\.pb\\.go$"         # Protocol buffer generated files
      - ".*\\.gen\\.go$"        # Generated files
      - "vendor/"               # Vendor directory
    
    # Rule-based exclusions
    rules:
      # Allow longer functions in test files
      - path: '(.+)_test\.go'
        linters:
          - funlen
          - gocyclo
          - cyclop
          - gocognit
          - maintidx

      # Allow magic numbers in test files
      - path: '(.+)_test\.go'
        linters:
          - mnd

      # Allow dot imports in test files for testify
      - path: '(.+)_test\.go'
        text: "should not use dot imports"
        linters:
          - revive

      # Exclude cobra command files from unused parameter checks
      - path: 'internal/cmd/'
        linters:
          - unparam

      # Allow blank imports in main.go for side effects
      - path: 'cmd/portguard/main\.go'
        linters:
          - revive
        text: "blank-imports"

# Formatters configuration (if supported in your version)
# formatters:
#   enable:
#     - gci
#     - gofmt
#     - goimports
