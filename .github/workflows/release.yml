name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
          cache: true

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Run tests
        run: |
          go test -v ./...

      - name: Build binaries
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          mkdir -p dist
          
          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "-X github.com/paveg/portguard/internal/cmd.Version=${VERSION}" -o dist/portguard-linux-amd64 ./cmd/portguard
          GOOS=linux GOARCH=arm64 go build -ldflags "-X github.com/paveg/portguard/internal/cmd.Version=${VERSION}" -o dist/portguard-linux-arm64 ./cmd/portguard
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X github.com/paveg/portguard/internal/cmd.Version=${VERSION}" -o dist/portguard-darwin-amd64 ./cmd/portguard
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X github.com/paveg/portguard/internal/cmd.Version=${VERSION}" -o dist/portguard-darwin-arm64 ./cmd/portguard
          GOOS=windows GOARCH=amd64 go build -ldflags "-X github.com/paveg/portguard/internal/cmd.Version=${VERSION}" -o dist/portguard-windows-amd64.exe ./cmd/portguard
          GOOS=windows GOARCH=arm64 go build -ldflags "-X github.com/paveg/portguard/internal/cmd.Version=${VERSION}" -o dist/portguard-windows-arm64.exe ./cmd/portguard

      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt

      - name: Generate release notes
        id: release_notes
        run: |
          echo "## Release v${{ steps.get_version.outputs.VERSION }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Using Go Install" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "go install github.com/paveg/portguard@v${{ steps.get_version.outputs.VERSION }}" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Download Binary" >> release_notes.md
          echo "Download the appropriate binary for your platform from the assets below." >> release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          echo "See the [CHANGELOG](https://github.com/paveg/portguard/blob/main/CHANGELOG.md) for detailed changes." >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test go install
        run: |
          # Test that the module can be installed via go install
          VERSION=${{ steps.get_version.outputs.VERSION }}
          echo "Testing go install for version v${VERSION}"
          
          # Create a temporary directory and test go install
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          # Initialize a test module
          go mod init test-install
          
          # Try to install the package (this tests that it can be fetched)
          go install github.com/paveg/portguard/cmd/portguard@v${VERSION} || echo "go install test will work after the tag is pushed"